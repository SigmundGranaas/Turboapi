using Microsoft.EntityFrameworkCore;
using Turboapi_geo.data.model;

namespace Turboapi_geo.domain.query.model;

public class LocationReadContext : DbContext
{
    public DbSet<LocationEntity> Locations { get; set; }

    public LocationReadContext(DbContextOptions<LocationReadContext> options)
        : base(options)
    {
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<LocationEntity>(entity =>
        {
            entity.ToTable("locations_read");
                
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id)
                .HasColumnName("id");
                
            entity.Property(e => e.OwnerId)
                .HasColumnName("owner_id")
                .IsRequired();

            entity.Property(e => e.Name)
                .HasColumnName("name");
            
            entity.Property(e => e.Description)
                .HasColumnName("description");
            
            entity.Property(e => e.Icon)
                .HasColumnName("icon");
                
            // Configure PostGIS geometry column
            entity.Property(e => e.Geometry)
                .HasColumnName("geometry")
                .HasColumnType("geometry(Point, 4326)")
                .IsRequired();
            
            entity.Property(e => e.CreatedAt)
                .HasColumnName("created_at")
                .IsRequired()
                .HasDefaultValueSql("CURRENT_TIMESTAMP") // Tells EF Core the DB has a default
                .ValueGeneratedOnAdd(); // Tells EF Core the value is generated by DB on add

            entity.Property(e => e.UpdatedAt)
                .HasColumnName("updated_at")
                .IsRequired(false) // It's nullable in LocationEntity
                .ValueGeneratedOnAddOrUpdate(); // Tells EF Core the value is generated by DB on add or update (e.g., by a trigger)
            
            // Configure indexes
            entity.HasIndex(e => e.OwnerId)
                .HasDatabaseName("idx_locations_read_owner");
            
            entity.HasIndex(e => e.Geometry)
                .HasDatabaseName("idx_locations_read_geometry")
                .HasMethod("GIST");
            
        });
    }
}